# Example GitHub Actions workflow with AutoHealer PR integration
# This file demonstrates how to configure AutoHealer for automatic PR creation

name: Test Execution with AutoHealer PR Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # AutoHealer Configuration
  AUTOHEALER_ENABLE_PR: "true"
  AUTOHEALER_MAX_FIXES_PER_PR: "10"
  AUTOHEALER_PR_DRAFT: "false"
  AUTOHEALER_BASE_BRANCH: "main"
  AUTOHEALER_MAX_ATTEMPTS: "3"
  AUTOHEALER_PR_REVIEWERS: "qa-team-lead,senior-dev"  # Replace with actual usernames
  AUTOHEALER_PR_LABELS: "bug-fix,automated"
  
  # Test Configuration
  BASE_URL: 'https://www.saucedemo.com/v1/'
  ALLURE_RESULTS_DIR: 'allure-results'
  PYTEST_HTML_REPORT: 'pytest-report.html'
  JUNIT_XML: 'junit-report.xml'

jobs:
  test-with-autohealer:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Required for git operations in AutoHealer
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m playwright install
    
    - name: Run tests with AutoHealer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: |
        # Run tests with AutoHealer pytest plugin
        pytest -v \
          --html=${{ env.PYTEST_HTML_REPORT }} \
          --junitxml=${{ env.JUNIT_XML }} \
          --alluredir=${{ env.ALLURE_RESULTS_DIR }} \
          -p Utilities.TestUtils.autohealer_pytest_plugin \
          --tb=short
      continue-on-error: true  # Allow tests to fail while still creating PRs
    
    - name: Generate Allure Report
      if: always()
      run: |
        pip install allure-pytest-commons
        allure generate ${{ env.ALLURE_RESULTS_DIR }} -o allure-report --clean
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: ${{ env.JUNIT_XML }}
        reporter: java-junit
    
    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          ${{ env.PYTEST_HTML_REPORT }}
          ${{ env.ALLURE_RESULTS_DIR }}
          allure-report
          reports/
    
    - name: Comment PR with Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## ü§ñ AutoHealer Test Results\n\n';
          
          // Check if there were any AutoHealer PRs created
          try {
            // This would be enhanced to check for actual PR creation
            comment += '‚úÖ Tests completed with AutoHealer monitoring\n';
            comment += 'üîç Any locator fixes will be proposed in separate PRs\n\n';
            comment += `üìä **Test Reports**: [View Artifacts](${context.payload.pull_request.html_url}/checks)\n`;
          } catch (error) {
            comment += '‚ùå Error checking AutoHealer status\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Separate job for AutoHealer status check
  autohealer-status:
    runs-on: ubuntu-latest
    needs: test-with-autohealer
    if: always()
    
    steps:
    - name: Check AutoHealer Configuration
      run: |
        echo "AutoHealer Configuration Check:"
        echo "- GITHUB_ACTIONS: $GITHUB_ACTIONS"
        echo "- GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "- AUTOHEALER_ENABLE_PR: $AUTOHEALER_ENABLE_PR"
        echo "- Token configured: ${{ secrets.GITHUB_TOKEN != '' }}"
        echo "- OpenAI configured: ${{ secrets.OPENAI_API_KEY != '' }}"
