INFO     TestAutomationFramework:logger.py:84 Navigating to base URL: https://www.saucedemo.com/v1/
DEBUG    TestAutomationFramework:logger.py:79 Setting up test base helpers
INFO     TestAutomationFramework:logger.py:84 AutoHealer initialized with OpenAI integration
INFO     TestAutomationFramework:logger.py:84 AutoHealer initialized with OpenAI integration
INFO     TestAutomationFramework:logger.py:84 AutoHealer initialized with OpenAI integration
DEBUG    TestAutomationFramework:logger.py:79 Test base setup completed
INFO     TestAutomationFramework:logger.py:84 Setting up HomePage tests...
INFO     TestAutomationFramework:logger.py:84 Logging in with username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'standard_user' to element '#user-name'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: username input field using locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Successfully found element using original locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Successfully filled element '#user-name' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully entered username
INFO     TestAutomationFramework:logger.py:84 Logging in with password: sec...
DEBUG    TestAutomationFramework:logger.py:79 Entering password
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'secret_sauce' to element '#passwd'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: password input field using locator: #passwd
WARNING  TestAutomationFramework:logger.py:89 Element not found with locator: #passwd
INFO     TestAutomationFramework:logger.py:84 Found locator '#passwd' declared in: /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py
INFO     TestAutomationFramework:logger.py:84 Found locator '#passwd' declared in /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py:13
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '#passwd'
- Element description: 'password input field'
- Error: Element not found: #passwd
- Page context: {'url': 'https://www.saucedemo.com/v1/', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:22:21', 'visible_text': 'Accepted usernames are:\nstandard_user\nlocked_out_user\nproblem_user\nperformance_glitch_user\n\nPassword for all users:\nsecret_sauce'}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'password input field' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLOyjiLBYAqCal5Yum3h73apKjbDb', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='{\n    "issue_type": "CSS Selector",\n    "confidence": 0.9,\n    "explanation": "The failed locator \'#passwd\' is not a specific or reliable selector. To target the \'password input field\' element more precisely, a better CSS selector would be \'input[type=password]\'. This selector targets input elements with the type attribute set to \'password\', ensuring a more accurate match.",\n    "patch": "input[type=password]"\n}', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759216941, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=93, prompt_tokens=961, total_tokens=1054, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - suggested fix: input[type=password] with confidence 0.9  and explanation: The failed locator '#passwd' is not a specific or reliable selector. To target the 'password input field' element more precisely, a better CSS selector would be 'input[type=password]'. This selector targets input elements with the type attribute set to 'password', ensuring a more accurate match. 
INFO     TestAutomationFramework:logger.py:84 âœ… AI suggested locator works: input[type=password]
DEBUG    TestAutomationFramework:logger.py:79 Loaded 1 existing failures
INFO     TestAutomationFramework:logger.py:84 Skipping duplicate failure: #passwd
INFO     TestAutomationFramework:logger.py:84 Saved captured failure to reports/captured_locator_failures.json (total: 1 failures)
WARNING  TestAutomationFramework:logger.py:89 ðŸŽ¯ Captured locator failure for PR creation: #passwd -> input[type=password]
INFO     TestAutomationFramework:logger.py:84 Successfully filled element '#passwd' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully entered password
INFO     TestAutomationFramework:logger.py:84 Clicking login button
DEBUG    TestAutomationFramework:logger.py:79 Clicking login button
DEBUG    TestAutomationFramework:logger.py:79 Clicking element '#login-button'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: login submit button using locator: #login-button
INFO     TestAutomationFramework:logger.py:84 Successfully found element using original locator: #login-button
INFO     TestAutomationFramework:logger.py:84 Successfully clicked element '#login-button' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully clicked login button
INFO     TestAutomationFramework:logger.py:84 Login completed successfully
INFO     TestAutomationFramework:logger.py:84 Login attempted with valid credentials.
INFO     TestAutomationFramework:logger.py:84 Verifying product details
INFO     TestAutomationFramework:logger.py:84 Reading properties from file: TestDataCommon/sauce_lab.properties
INFO     TestAutomationFramework:logger.py:84 data fetched from TestDataCommon/sauce_lab.properties is 
{'products_list': ('Sauce Labs Backpack', 'Sauce Labs Bike Light', 'Sauce Labs Bolt T-Shirt', 'Sauce Labs Fleece Jacket', 'Sauce Labs Onesie', 'Test.allTheThings() T-Shirt (Red)'), 'product_price_list': ('$29.99', '$9.99', '$15.99', '$49.99', '$7.99', '$15.99')}
DEBUG    TestAutomationFramework:logger.py:79 Verifying product: Sauce Labs Backpack
INFO     TestAutomationFramework:logger.py:84 Product 'Sauce Labs Backpack' is displayed
DEBUG    TestAutomationFramework:logger.py:79 Verifying product: Sauce Labs Bike Light
INFO     TestAutomationFramework:logger.py:84 Product 'Sauce Labs Bike Light' is displayed
DEBUG    TestAutomationFramework:logger.py:79 Verifying product: Sauce Labs Bolt T-Shirt
INFO     TestAutomationFramework:logger.py:84 Product 'Sauce Labs Bolt T-Shirt' is displayed
DEBUG    TestAutomationFramework:logger.py:79 Verifying product: Sauce Labs Fleece Jacket
INFO     TestAutomationFramework:logger.py:84 Product 'Sauce Labs Fleece Jacket' is displayed
DEBUG    TestAutomationFramework:logger.py:79 Verifying product: Sauce Labs Onesie
INFO     TestAutomationFramework:logger.py:84 Product 'Sauce Labs Onesie' is displayed
DEBUG    TestAutomationFramework:logger.py:79 Verifying product: Test.allTheThings() T-Shirt (Red)
INFO     TestAutomationFramework:logger.py:84 Product 'Test.allTheThings() T-Shirt (Red)' is displayed
INFO     TestAutomationFramework:logger.py:84 Verifying product price: $29.99
ERROR    TestAutomationFramework:logger.py:94 Failed to verify product price '$29.99': LocatorAssertions.to_be_visible: SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']' is not a valid XPath expression.
    at Object.queryAll (<anonymous>:5900:25)
    at InjectedScript._queryEngineAll (<anonymous>:6586:49)
    at InjectedScript.querySelectorAll (<anonymous>:6573:30)
    at eval (eval at evaluate (:291:30), <anonymous>:2:42)
    at UtilityScript.evaluate (<anonymous>:293:16)
    at UtilityScript.<anonymous> (<anonymous>:1:44)
Call log:
  - Expect "to_be_visible" with timeout 5000ms
  - waiting for locator("//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']").filter(has_text="$29.99")

WARNING  TestAutomationFramework:logger.py:89 Product price '$29.99' is not displayed
INFO     TestAutomationFramework:logger.py:84 Verifying product price: $9.99
ERROR    TestAutomationFramework:logger.py:94 Failed to verify product price '$9.99': LocatorAssertions.to_be_visible: SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']' is not a valid XPath expression.
    at Object.queryAll (<anonymous>:5900:25)
    at InjectedScript._queryEngineAll (<anonymous>:6586:49)
    at InjectedScript.querySelectorAll (<anonymous>:6573:30)
    at eval (eval at evaluate (:291:30), <anonymous>:2:42)
    at UtilityScript.evaluate (<anonymous>:293:16)
    at UtilityScript.<anonymous> (<anonymous>:1:44)
Call log:
  - Expect "to_be_visible" with timeout 5000ms
  - waiting for locator("//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']").filter(has_text="$9.99")

WARNING  TestAutomationFramework:logger.py:89 Product price '$9.99' is not displayed
INFO     TestAutomationFramework:logger.py:84 Verifying product price: $15.99
ERROR    TestAutomationFramework:logger.py:94 Failed to verify product price '$15.99': LocatorAssertions.to_be_visible: SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']' is not a valid XPath expression.
    at Object.queryAll (<anonymous>:5900:25)
    at InjectedScript._queryEngineAll (<anonymous>:6586:49)
    at InjectedScript.querySelectorAll (<anonymous>:6573:30)
    at eval (eval at evaluate (:291:30), <anonymous>:2:42)
    at UtilityScript.evaluate (<anonymous>:293:16)
    at UtilityScript.<anonymous> (<anonymous>:1:44)
Call log:
  - Expect "to_be_visible" with timeout 5000ms
  - waiting for locator("//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']").filter(has_text="$15.99")

WARNING  TestAutomationFramework:logger.py:89 Product price '$15.99' is not displayed
INFO     TestAutomationFramework:logger.py:84 Verifying product price: $49.99
ERROR    TestAutomationFramework:logger.py:94 Failed to verify product price '$49.99': LocatorAssertions.to_be_visible: SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']' is not a valid XPath expression.
    at Object.queryAll (<anonymous>:5900:25)
    at InjectedScript._queryEngineAll (<anonymous>:6586:49)
    at InjectedScript.querySelectorAll (<anonymous>:6573:30)
    at eval (eval at evaluate (:291:30), <anonymous>:2:42)
    at UtilityScript.evaluate (<anonymous>:293:16)
    at UtilityScript.<anonymous> (<anonymous>:1:44)
Call log:
  - Expect "to_be_visible" with timeout 5000ms
  - waiting for locator("//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']").filter(has_text="$49.99")

WARNING  TestAutomationFramework:logger.py:89 Product price '$49.99' is not displayed
INFO     TestAutomationFramework:logger.py:84 Verifying product price: $7.99
ERROR    TestAutomationFramework:logger.py:94 Failed to verify product price '$7.99': LocatorAssertions.to_be_visible: SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']' is not a valid XPath expression.
    at Object.queryAll (<anonymous>:5900:25)
    at InjectedScript._queryEngineAll (<anonymous>:6586:49)
    at InjectedScript.querySelectorAll (<anonymous>:6573:30)
    at eval (eval at evaluate (:291:30), <anonymous>:2:42)
    at UtilityScript.evaluate (<anonymous>:293:16)
    at UtilityScript.<anonymous> (<anonymous>:1:44)
Call log:
  - Expect "to_be_visible" with timeout 5000ms
  - waiting for locator("//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']").filter(has_text="$7.99")

WARNING  TestAutomationFramework:logger.py:89 Product price '$7.99' is not displayed
INFO     TestAutomationFramework:logger.py:84 Verifying product price: $15.99
ERROR    TestAutomationFramework:logger.py:94 Failed to verify product price '$15.99': LocatorAssertions.to_be_visible: SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']' is not a valid XPath expression.
    at Object.queryAll (<anonymous>:5900:25)
    at InjectedScript._queryEngineAll (<anonymous>:6586:49)
    at InjectedScript.querySelectorAll (<anonymous>:6573:30)
    at eval (eval at evaluate (:291:30), <anonymous>:2:42)
    at UtilityScript.evaluate (<anonymous>:293:16)
    at UtilityScript.<anonymous> (<anonymous>:1:44)
Call log:
  - Expect "to_be_visible" with timeout 5000ms
  - waiting for locator("//div[./div/a/div[text()='Sauce Labs Backpack']]//div[@cla ss='inventory_item_price']").filter(has_text="$15.99")

WARNING  TestAutomationFramework:logger.py:89 Product price '$15.99' is not displayed
DEBUG    TestAutomationFramework:logger.py:79 Closing browser page