[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.venv
  | __pycache__
  | .pytest_cache
  | .mypy_cache
  | .coverage
  | htmlcov
  | \.github
  | .github
  | \.dvenv
  | .allure-results
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["SRC", "Utilities"]
known_third_party = ["pytest", "playwright", "allure"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
extend_skip = ["regression_runnner.py"]


[tool.bandit]
targets = ["SRC", "Utilities"]
exclude_dirs = [
  ".venv",
  "tests",
  ".pytest_cache",
  "__pycache__",
  "node_modules",
]
skips = [
  "B101", # assert_used
  "B311", # random
  "B404", # import_subprocess
  "B603", # subprocess_without_shell_equals_true
  "B607", # subprocess_popen_with_shell_equals_true
]

[tool.coverage.run]
source = ["SRC", "Utilities"]
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/conftest.py",
  "*/.venv/*",
  "*/migrations/*",
  "*/test_*.py",
  "*_test.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "raise ImportError",
]

[tool.pytest.ini_options]
# Test discovery
testpaths = ["SRC/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "test*"]
python_functions = ["test_*"]

# Addopts: reporting + rootdir + import mode
addopts = """
  -v -s
  --alluredir=allure-results
  --junitxml=test-results.xml
  --tb=short
  --json-report
  --html=report.html
  --self-contained-html
  --import-mode=importlib
"""

# Rootdir & Python path handling (important to avoid pytest.ini)
# This ensures SRC and project root are in sys.path automatically
pythonpath = [
  ".",   # project root
  "SRC", # source folder for framework imports
]

# Logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# JUnit report
junit_family = "xunit2"
junit_logging = "all"

# Custom markers
markers = [
  "xray: mark tests for Xray integration",
  "smoke: mark tests for smoke suite",
  "regression: mark tests for regression suite",
  "sanity: mark tests for sanity suite",
  "critical: mark tests for critical path",
  "ui_validation: mark tests for UI validation",
  "api: mark tests for API validation",
  "stable: mark tests for stable suite",
]

[tool.pylint.main]
ignore = [
  "__pycache__",
  ".venv",
  "build",
  "dist",
  "Utilities/ReportUtils/generate_pytest_report.py",
  "regression_runnner.py"
]
ignore-patterns = [".*generate_pytest_report\\.py",  ".xml", "regression_runnner\\.py"]
jobs = 1
score = true 
fail-under = 9
init-hook = 'import sys; sys.path.append(".")'

[tool.pylint.messages_control]
disable = [
  "C0114", # missing-module-docstring
  "C0115", # missing-class-docstring
  "C0116", # missing-function-docstring
  "C0411", # wrong-import-order
  "C0303", # trailing-whitespace
  "C0304", # missing-final-newline
  "C0413", # wrong-import-position
  "R0903", # too-few-public-methods
  "W0123", # eval-used
  "W0143", # comparison-with-callable
  "W0201", # attribute-defined-outside-init
  "W0212", # protected-access
  "W0237", # arguments-renamed
  "W0603", # global-statement
  "W0611", # unused-import
  "W0621", # redefined-outer-name
  "W0622", # redefined-builtin
  "W0702", # bare-except
  "W0703", # broad-except
  "W0707", # raise-missing-from
  "W0718", # broad-exception-caught
  "W0106", # expression-statement
  "R1710", # inconsistent-return-statements
  "R1723", # no-else-break
  "R1732", # consider-using-with
  "R1735", # consider-using-dict-comprehension
]

[tool.pylint.reports]
output-format = "colorized"
score = true

[tool.pylint.format]
max-line-length = 120
indent-string = "    "
good-names = ["i", "j", "k", "ex", "Run", "_", "db", "df", "ok", "f", "e"]

[tool.pylint.basic]
function-rgx = "(test_[a-zA-Z0-9_]+|[a-z_][a-z0-9_]{2,40})$"

[tool.pylint.design]
max-args = 8
max-attributes = 15
max-locals = 25
max-branches = 15
max-statements = 80

[tool.pylint.typecheck]
generated-members = ["pytest.*", "request.*", "browser.*", "page.*"]

[tool.mypy]
python_version = "3.11"
explicit_package_bases = true
# Disable specific error codes
disable_error_code = [
  "no-untyped-def",     # Function is missing a return type annotation
  "func-returns-value", # Function does not return a value (returns None)
  "union-attr",         # Item "None" has no attribute
  "no-any-return",      # Returning Any from function declared to return specific type
  "import-untyped",     # Library stubs not installed (e.g., pandas)
  "misc",               # Untyped decorator makes function untyped
  "arg-type",           # Argument has incompatible type
]

# ---- Strict checks (for framework code: SRC, Utilities, TestDataCommon) ----
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
strict_equality = true

# ---- Warnings / code hygiene ----
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# ---- Overrides for tests + dynamically typed utility scripts ----
[[tool.mypy.overrides]]
module = [
  "SRC.tests.*",
  "tests.*",
  "Utilities.ReportUtils.generate_pytest_report",
  "pytest",
  "regression_runnner.py"
]
ignore_errors = true
