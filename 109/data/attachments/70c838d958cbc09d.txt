INFO     TestAutomationFramework:logger.py:84 Navigating to base URL: https://www.saucedemo.com/v1/
DEBUG    TestAutomationFramework:logger.py:79 Setting up test base helpers
INFO     TestAutomationFramework:logger.py:84 AutoHealer initialized with OpenAI integration
INFO     TestAutomationFramework:logger.py:84 AutoHealer initialized with OpenAI integration
INFO     TestAutomationFramework:logger.py:84 AutoHealer initialized with OpenAI integration
DEBUG    TestAutomationFramework:logger.py:79 Test base setup completed
INFO     TestAutomationFramework:logger.py:84 Logging in with username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'standard_user' to element '#user-name'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: username input field using locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Successfully found element using original locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Successfully filled element '#user-name' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully entered username
INFO     TestAutomationFramework:logger.py:84 Logging in with password: sec...
DEBUG    TestAutomationFramework:logger.py:79 Entering password
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'secret_sauce' to element '#passwd'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: password input field using locator: #passwd
WARNING  TestAutomationFramework:logger.py:89 Element not found with locator: #passwd
INFO     TestAutomationFramework:logger.py:84 Found locator '#passwd' declared in: /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py
INFO     TestAutomationFramework:logger.py:84 Found locator '#passwd' declared in /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py:13
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '#passwd'
- Element description: 'password input field'
- Error: Element not found: #passwd
- Page context: {'url': 'https://www.saucedemo.com/v1/', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:24', 'visible_text': 'Accepted usernames are:\nstandard_user\nlocked_out_user\nproblem_user\nperformance_glitch_user\n\nPassword for all users:\nsecret_sauce'}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'password input field' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPI8pBnRhq2gy2GPAczzV13lYtN2', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='{\n    "issue_type": "CSS Selector",\n    "confidence": 0.9,\n    "explanation": "The failed locator \'#passwd\' is not specific and might not be stable. To create a more robust selector, we can target the password input field using its type attribute as \'password\'.",\n    "patch": "input[type=\'password\']"\n}', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218144, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=75, prompt_tokens=961, total_tokens=1036, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - suggested fix: input[type='password'] with confidence 0.9  and explanation: The failed locator '#passwd' is not specific and might not be stable. To create a more robust selector, we can target the password input field using its type attribute as 'password'. 
INFO     TestAutomationFramework:logger.py:84 ✅ AI suggested locator works: input[type='password']
DEBUG    TestAutomationFramework:logger.py:79 Loaded 1 existing failures
INFO     TestAutomationFramework:logger.py:84 Skipping duplicate failure: #passwd
INFO     TestAutomationFramework:logger.py:84 Saved captured failure to reports/captured_locator_failures.json (total: 1 failures)
WARNING  TestAutomationFramework:logger.py:89 🎯 Captured locator failure for PR creation: #passwd -> input[type='password']
INFO     TestAutomationFramework:logger.py:84 Successfully filled element '#passwd' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully entered password
INFO     TestAutomationFramework:logger.py:84 Clicking login button
DEBUG    TestAutomationFramework:logger.py:79 Clicking login button
DEBUG    TestAutomationFramework:logger.py:79 Clicking element '#login-button'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: login submit button using locator: #login-button
INFO     TestAutomationFramework:logger.py:84 Successfully found element using original locator: #login-button
INFO     TestAutomationFramework:logger.py:84 Successfully clicked element '#login-button' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully clicked login button
INFO     TestAutomationFramework:logger.py:84 Login completed successfully
INFO     TestAutomationFramework:logger.py:84 Clicking logout button
DEBUG    TestAutomationFramework:logger.py:79 Initiating logout process
DEBUG    TestAutomationFramework:logger.py:79 Opened menu for logout
DEBUG    TestAutomationFramework:logger.py:79 Clicking element '//*[contains(text(), "Lgout")]'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: logout button using locator: //*[contains(text(), "Lgout")]
WARNING  TestAutomationFramework:logger.py:89 Element not found with locator: //*[contains(text(), "Lgout")]
INFO     TestAutomationFramework:logger.py:84 Found locator '//*[contains(text(), "Lgout")]' declared in: /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py
INFO     TestAutomationFramework:logger.py:84 Found locator '//*[contains(text(), "Lgout")]' declared in /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py:16
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '//*[contains(text(), "Lgout")]'
- Element description: 'logout button'
- Error: Element not found: //*[contains(text(), "Lgout")]
- Page context: {'url': 'https://www.saucedemo.com/v1/inventory.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:25', 'visible_text': "All Items\nAbout\nLogout\nReset App State\nClose Menu\nOpen Menu\nProducts\nName (A to Z)\nName (Z to A)\nPrice (low to high)\nPrice (high to low)\nSauce Labs Backpack\ncarry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.\n$29.99\nADD TO CART\nSauce Labs Bike Light\nA red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.\n$9.99\nA"}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'logout button' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPI9svNtcCCnveP8wE7iuzMHGqSG', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='{\n    "issue_type": "CSS Selector",\n    "confidence": 0.9,\n    "explanation": "The failed XPath locator \'//*[contains(text(), \\"Lgout\\")]\' is too generic and prone to breaking with minor UI changes. To create a more robust selector, we can use the text content of the element along with a more specific identifier.",\n    "patch": "//a[contains(text(), \'Logout\')]"\n}', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218145, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=89, prompt_tokens=1086, total_tokens=1175, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - suggested fix: //a[contains(text(), 'Logout')] with confidence 0.9  and explanation: The failed XPath locator '//*[contains(text(), "Lgout")]' is too generic and prone to breaking with minor UI changes. To create a more robust selector, we can use the text content of the element along with a more specific identifier. 
INFO     TestAutomationFramework:logger.py:84 ✅ AI suggested locator works: //a[contains(text(), 'Logout')]
DEBUG    TestAutomationFramework:logger.py:79 Loaded 1 existing failures
INFO     TestAutomationFramework:logger.py:84 Adding new failure: //*[contains(text(), "Lgout")] -> //a[contains(text(), 'Logout')]
INFO     TestAutomationFramework:logger.py:84 Saved captured failure to reports/captured_locator_failures.json (total: 2 failures)
WARNING  TestAutomationFramework:logger.py:89 🎯 Captured locator failure for PR creation: //*[contains(text(), "Lgout")] -> //a[contains(text(), 'Logout')]
INFO     TestAutomationFramework:logger.py:84 Successfully clicked element '//*[contains(text(), "Lgout")]' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully completed logout process
INFO     TestAutomationFramework:logger.py:84 Logout completed successfully
INFO     TestAutomationFramework:logger.py:84 Verifying logout success with expected URL: https://www.saucedemo.com/v1//index.html | Actual URL: https://www.saucedemo.com/v1/index.html
ERROR    TestAutomationFramework:logger.py:94 [Retry] Attempt 1 failed: Expected URL: https://www.saucedemo.com/v1//index.html, but got: https://www.saucedemo.com/v1/index.html. Retrying in 1s...
INFO     TestAutomationFramework:logger.py:84 Logging in with username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'standard_user' to element '#user-name'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: username input field using locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Successfully found element using original locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Successfully filled element '#user-name' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully entered username
INFO     TestAutomationFramework:logger.py:84 Logging in with password: sec...
DEBUG    TestAutomationFramework:logger.py:79 Entering password
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'secret_sauce' to element '#passwd'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: password input field using locator: #passwd
WARNING  TestAutomationFramework:logger.py:89 Element not found with locator: #passwd
INFO     TestAutomationFramework:logger.py:84 Found locator '#passwd' declared in: /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py
INFO     TestAutomationFramework:logger.py:84 Found locator '#passwd' declared in /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py:13
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '#passwd'
- Element description: 'password input field'
- Error: Element not found: #passwd
- Page context: {'url': 'https://www.saucedemo.com/v1/index.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:27', 'visible_text': 'Accepted usernames are:\nstandard_user\nlocked_out_user\nproblem_user\nperformance_glitch_user\n\nPassword for all users:\nsecret_sauce'}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'password input field' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPIBFvYh0jSj5QsHZ9D4xAgXSWPs', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='{\n\t"issue_type": "CSS Selector",\n\t"confidence": 0.9,\n\t"explanation": "The failed locator \'#passwd\' is not specific and might not be stable. To improve the selector, we can target the password input field with a more reliable and specific CSS selector.",\n\t"patch": "input#password[type=\'password\']"\n}', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218147, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=75, prompt_tokens=963, total_tokens=1038, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - suggested fix: input#password[type='password'] with confidence 0.9  and explanation: The failed locator '#passwd' is not specific and might not be stable. To improve the selector, we can target the password input field with a more reliable and specific CSS selector. 
INFO     TestAutomationFramework:logger.py:84 ✅ AI suggested locator works: input#password[type='password']
DEBUG    TestAutomationFramework:logger.py:79 Loaded 2 existing failures
INFO     TestAutomationFramework:logger.py:84 Skipping duplicate failure: #passwd
INFO     TestAutomationFramework:logger.py:84 Saved captured failure to reports/captured_locator_failures.json (total: 2 failures)
WARNING  TestAutomationFramework:logger.py:89 🎯 Captured locator failure for PR creation: #passwd -> input#password[type='password']
INFO     TestAutomationFramework:logger.py:84 Successfully filled element '#passwd' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully entered password
INFO     TestAutomationFramework:logger.py:84 Clicking login button
DEBUG    TestAutomationFramework:logger.py:79 Clicking login button
DEBUG    TestAutomationFramework:logger.py:79 Clicking element '#login-button'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: login submit button using locator: #login-button
INFO     TestAutomationFramework:logger.py:84 Successfully found element using original locator: #login-button
INFO     TestAutomationFramework:logger.py:84 Successfully clicked element '#login-button' using AutoHealer
INFO     TestAutomationFramework:logger.py:84 Successfully clicked login button
INFO     TestAutomationFramework:logger.py:84 Login completed successfully
INFO     TestAutomationFramework:logger.py:84 Clicking logout button
DEBUG    TestAutomationFramework:logger.py:79 Initiating logout process
DEBUG    TestAutomationFramework:logger.py:79 Opened menu for logout
DEBUG    TestAutomationFramework:logger.py:79 Clicking element '//*[contains(text(), "Lgout")]'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: logout button using locator: //*[contains(text(), "Lgout")]
WARNING  TestAutomationFramework:logger.py:89 Element not found with locator: //*[contains(text(), "Lgout")]
INFO     TestAutomationFramework:logger.py:84 Found locator '//*[contains(text(), "Lgout")]' declared in: /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py
INFO     TestAutomationFramework:logger.py:84 Found locator '//*[contains(text(), "Lgout")]' declared in /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py:16
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '//*[contains(text(), "Lgout")]'
- Element description: 'logout button'
- Error: Element not found: //*[contains(text(), "Lgout")]
- Page context: {'url': 'https://www.saucedemo.com/v1/inventory.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:28', 'visible_text': "All Items\nAbout\nLogout\nReset App State\nClose Menu\nOpen Menu\nProducts\nName (A to Z)\nName (Z to A)\nPrice (low to high)\nPrice (high to low)\nSauce Labs Backpack\ncarry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.\n$29.99\nADD TO CART\nSauce Labs Bike Light\nA red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.\n$9.99\nA"}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'logout button' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPICmMWAidyhyPc6tpdAyoBOyrD1', choices=[Choice(finish_reason='length', index=0, logprobs=None, message=ChatCompletionMessage(content='{\n    "issue_type": "CSS Selector",\n    "confidence": 0.9,\n    "explanation": "The failed XPath locator \'//*[contains(text(), \\"Lgout\\")]\' is too generic and relies on the text content, which can be prone to changes. To create a more robust selector, we can target the \'Logout\' button using a CSS selector that is more specific and less likely to break with minor UI changes.",\n    "patch": "a:has-text(\'', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218148, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=100, prompt_tokens=1086, total_tokens=1186, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
ERROR    TestAutomationFramework:logger.py:94 Error querying OpenAI: Unterminated string starting at: line 5 column 14 (char 391)
INFO     TestAutomationFramework:logger.py:84 Falling back to heuristic suggestions on failure from Azure OpenAI.
INFO     TestAutomationFramework:logger.py:84 Using fallback locator suggestion logic
DEBUG    TestAutomationFramework:logger.py:79 Loaded 2 existing failures
INFO     TestAutomationFramework:logger.py:84 Skipping duplicate failure: //*[contains(text(), "Lgout")]
INFO     TestAutomationFramework:logger.py:84 Saved captured failure to reports/captured_locator_failures.json (total: 2 failures)
WARNING  TestAutomationFramework:logger.py:89 🎯 Captured locator failure for PR creation: //*[contains(text(), "Lgout")] -> None
INFO     TestAutomationFramework:logger.py:84 AI healing attempt 1 for: logout button
INFO     TestAutomationFramework:logger.py:84 DOM snapshot saved: reports/dom_snapshot_logout_button_20250930-074229.html
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '//*[contains(text(), "Lgout")]'
- Element description: 'logout button'
- Error: Element not found: //*[contains(text(), "Lgout")]
- Page context: {'url': 'https://www.saucedemo.com/v1/inventory.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:29', 'visible_text': "All Items\nAbout\nLogout\nReset App State\nClose Menu\nOpen Menu\nProducts\nName (A to Z)\nName (Z to A)\nPrice (low to high)\nPrice (high to low)\nSauce Labs Backpack\ncarry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.\n$29.99\nADD TO CART\nSauce Labs Bike Light\nA red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.\n$9.99\nA"}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'logout button' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPID5q5DJzMdkyPqioiwAJprMzde', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='Based on the provided context, a more robust CSS selector for the \'logout button\' element would be:\n\n```css\nbutton:has-text(\'Logout\')\n```\n\nThis CSS selector targets a button element that has the exact text \'Logout\', ensuring precision and reliability in locating the element.\n\n**Confidence Score**: 95%\n\n**Patch**:\n```diff\n- \'//*[contains(text(), "Lgout")]\'\n+ \'button:has-text(\'Logout\')\'\n```', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218149, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=95, prompt_tokens=1086, total_tokens=1181, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
ERROR    TestAutomationFramework:logger.py:94 Error querying OpenAI: Expecting value: line 1 column 1 (char 0)
INFO     TestAutomationFramework:logger.py:84 Falling back to heuristic suggestions on failure from Azure OpenAI.
INFO     TestAutomationFramework:logger.py:84 Using fallback locator suggestion logic
INFO     TestAutomationFramework:logger.py:84 AI healing attempt 2 for: logout button
INFO     TestAutomationFramework:logger.py:84 DOM snapshot saved: reports/dom_snapshot_logout_button_20250930-074232.html
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '//*[contains(text(), "Lgout")]'
- Element description: 'logout button'
- Error: Element not found: //*[contains(text(), "Lgout")]
- Page context: {'url': 'https://www.saucedemo.com/v1/inventory.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:32', 'visible_text': "All Items\nAbout\nLogout\nReset App State\nClose Menu\nOpen Menu\nProducts\nName (A to Z)\nName (Z to A)\nPrice (low to high)\nPrice (high to low)\nSauce Labs Backpack\ncarry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.\n$29.99\nADD TO CART\nSauce Labs Bike Light\nA red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.\n$9.99\nA"}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'logout button' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPIGXgjcBid6tV48ISHUEW9yOTpA', choices=[Choice(finish_reason='length', index=0, logprobs=None, message=ChatCompletionMessage(content='I have analyzed the failed locator for the \'logout button\' element and based on the provided context, I recommend the following CSS selector as a better alternative:\n\n```css\nbutton:has-text(\'Logout\')\n```\n\nThis CSS selector targets a button element that has the exact text \'Logout\', ensuring precision and reliability in locating the element.\n\n**Confidence Score**: 95%\n\n**Patch**:\n```diff\n- \'//*[contains(text(), "Lgout")]\'\n+ \'button:has-text', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218152, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=100, prompt_tokens=1086, total_tokens=1186, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
ERROR    TestAutomationFramework:logger.py:94 Error querying OpenAI: Expecting value: line 1 column 1 (char 0)
INFO     TestAutomationFramework:logger.py:84 Falling back to heuristic suggestions on failure from Azure OpenAI.
INFO     TestAutomationFramework:logger.py:84 Using fallback locator suggestion logic
INFO     TestAutomationFramework:logger.py:84 AI healing attempt 3 for: logout button
INFO     TestAutomationFramework:logger.py:84 DOM snapshot saved: reports/dom_snapshot_logout_button_20250930-074233.html
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '//*[contains(text(), "Lgout")]'
- Element description: 'logout button'
- Error: Element not found: //*[contains(text(), "Lgout")]
- Page context: {'url': 'https://www.saucedemo.com/v1/inventory.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:33', 'visible_text': "All Items\nAbout\nLogout\nReset App State\nClose Menu\nOpen Menu\nProducts\nName (A to Z)\nName (Z to A)\nPrice (low to high)\nPrice (high to low)\nSauce Labs Backpack\ncarry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.\n$29.99\nADD TO CART\nSauce Labs Bike Light\nA red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.\n$9.99\nA"}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'logout button' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPIHQsV13DXjhZtrnytlrSetWvjX', choices=[Choice(finish_reason='length', index=0, logprobs=None, message=ChatCompletionMessage(content='I have analyzed the failed locator for the \'logout button\' element and identified a more robust CSS selector for it. \n\nGiven the context that the element description is \'logout button\' and the visible text on the page includes "Logout", a suitable CSS selector for the \'logout button\' element would be:\n\n```css\na:has-text(\'Logout\')\n```\n\nThis CSS selector targets an anchor `<a>` element that has the text \'Logout\', which aligns with the description of the element as', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218153, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=100, prompt_tokens=1086, total_tokens=1186, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
ERROR    TestAutomationFramework:logger.py:94 Error querying OpenAI: Expecting value: line 1 column 1 (char 0)
INFO     TestAutomationFramework:logger.py:84 Falling back to heuristic suggestions on failure from Azure OpenAI.
INFO     TestAutomationFramework:logger.py:84 Using fallback locator suggestion logic
ERROR    TestAutomationFramework:logger.py:94 Maximum healing attempts (3) reached for: logout button
ERROR    TestAutomationFramework:logger.py:94 AutoHealer could not locate element 'logout button' with locator '//*[contains(text(), "Lgout")]' after all healing attempts
ERROR    TestAutomationFramework:logger.py:94 Click action failed for '//*[contains(text(), "Lgout")]': Element 'logout button' not found with locator '//*[contains(text(), "Lgout")]' even after AI healing attempts
ERROR    TestAutomationFramework:logger.py:94 [Retry] Attempt 2 failed: Click action failed for '//*[contains(text(), "Lgout")]': Element 'logout button' not found with locator '//*[contains(text(), "Lgout")]' even after AI healing attempts. Retrying in 2s...
INFO     TestAutomationFramework:logger.py:84 Logging in with username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering username: standard_user
DEBUG    TestAutomationFramework:logger.py:79 Entering text:'standard_user' to element '#user-name'
INFO     TestAutomationFramework:logger.py:84 Attempting to locate element: username input field using locator: #user-name
WARNING  TestAutomationFramework:logger.py:89 Element not found with locator: #user-name
INFO     TestAutomationFramework:logger.py:84 Found locator '#user-name' declared in: /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py
INFO     TestAutomationFramework:logger.py:84 Found locator '#user-name' declared in /home/runner/work/SMBC-IntelliTest/SMBC-IntelliTest/SRC/pages/login_page.py:12
INFO     TestAutomationFramework:logger.py:84 Healing with AI: Requesting alternative_locator from OpenAI with prompt: You are an expert QA automation engineer using Playwright. Your task is to analyze the failed locator and suggest a better CSS selector or XPath that can be used with page.locator().

**CRITICAL RULES**:
1. **Be Precise**: Your selectors MUST target exactly one element.
2. **Return CSS Selectors or XPath**: Only return selectors that work with page.locator(), NOT getByRole() or other Playwright methods.

**PREFERRED LOCATOR STRATEGIES** (in order of preference):
1. **Test IDs and Data Attributes** (most reliable):
   - `[data-testid='submit-btn']`
   - `[data-test='login-button']`
   - `[data-cy='username-input']`

2. **Semantic HTML attributes**:
   - `[aria-label='Submit form']`
   - `[title='Close dialog']`
   - `input[placeholder='Enter username']`
   - `img[alt='Company logo']`

3. **ID and Name attributes**:
   - `#submit-button`
   - `input[name='username']`
   - `form[id='login-form']`

4. **Class-based selectors** (be specific):
   - `.submit-btn.primary`
   - `.form-input.username`
   - `button.btn-primary`

5. **Attribute combinations**:
   - `input[type='password'][name='password']`
   - `button[type='submit'][class*='primary']`
   - `a[href*='login'][class='nav-link']`

6. **Text-based CSS selectors**:
   - `button:has-text('Submit')`
   - `a:has-text('Login')`
   - `span:text('Error message')`

7. **XPath** (when CSS is not sufficient):
   - `//button[text()='Submit']`
   - `//input[@placeholder='Username']`
   - `//div[contains(@class,'error') and contains(text(),'Invalid')]`

**VERIFICATION CHECKLIST**:
Before finalizing a selector, verify:
1. It matches exactly one element
2. It's not too generic (avoid single class names like .btn)
3. It's not overly complex (keep it maintainable)
4. It's stable (won't break with minor UI changes)
5. It works with page.locator() method

**COMMON PITFALLS TO AVOID**:
- Don't use position-based selectors (e.g., :nth-child) unless absolutely necessary
- Don't rely on dynamic class names that include hashes or numbers
- Don't use selectors that match multiple elements
- Don't return getByRole(), getByText(), or other Playwright methods

**EXAMPLES OF GOOD LOCATORS**:
- `[data-testid='password-input']`
- `#login-button`
- `input[name='username'][type='text']`
- `button[aria-label='Submit login form']`
- `//button[text()='Login' and @type='submit']`

**IMPORTANT**: 
1. Return ONLY CSS selectors or XPath that work with page.locator()
2. Do NOT return getByRole(), getByText(), getByLabel() or similar methods
3. Make selectors as specific as needed to target exactly one element
4. Prefer CSS selectors over XPath when possible

**HEALING CONTEXT**:
- Failed locator: '#user-name'
- Element description: 'username input field'
- Error: Element not found: #user-name
- Page context: {'url': 'https://www.saucedemo.com/v1/inventory.html', 'title': 'Swag Labs', 'viewport': {'width': 1280, 'height': 720}, 'timestamp': '2025-09-30 07:42:36', 'visible_text': "All Items\nAbout\nLogout\nReset App State\nClose Menu\nOpen Menu\nProducts\nName (A to Z)\nName (Z to A)\nPrice (low to high)\nPrice (high to low)\nSauce Labs Backpack\ncarry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.\n$29.99\nADD TO CART\nSauce Labs Bike Light\nA red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.\n$9.99\nA"}
- DOM snapshot available for analysis

**TASK**: Analyze the failed locator and suggest a better, more robust CSS selector or XPath for the 'username input field' element.

**OUTPUT**: Return ONLY a CSS selector or XPath string that works with page.locator(). 
Examples: 
- "#password" 
- "[data-testid='submit-btn']"
- "input[name='password'][type='password']"
- "//button[text()='Login']"

Do NOT return getByRole(), getByText(), or other Playwright methods. Return raw selectors only.
INFO     httpx:_client.py:1025 HTTP Request: POST https://automationhealing.openai.azure.com/openai/deployments/gpt-3.5-turbo/chat/completions?api-version=2024-05-01-preview "HTTP/1.1 200 OK"
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - Raw Response for healing alternative_locator : ChatCompletion(id='chatcmpl-CLPIKlyiPveQJ6xzN2ND1e5y8zGzL', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='{\n    "issue_type": "CSS Selector",\n    "confidence": 0.9,\n    "explanation": "The failed locator \'#user-name\' is likely not targeting the \'username input field\' accurately. To provide a more robust CSS selector, we can consider using a combination of attributes like name and type to uniquely identify the input field.",\n    "patch": "input[name=\'user-name\'][type=\'text\']"\n}', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=None), content_filter_results={'hate': {'filtered': False, 'severity': 'safe'}, 'protected_material_code': {'filtered': False, 'detected': False}, 'protected_material_text': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}})], created=1759218156, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint='fp_0165350fbb', usage=CompletionUsage(completion_tokens=88, prompt_tokens=1075, total_tokens=1163, completion_tokens_details=None, prompt_tokens_details=None), prompt_filter_results=[{'prompt_index': 0, 'content_filter_results': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': False, 'detected': False}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}])
INFO     TestAutomationFramework:logger.py:84 Azure OpenAI gpt-3.5-turbo model - suggested fix: input[name='user-name'][type='text'] with confidence 0.9  and explanation: The failed locator '#user-name' is likely not targeting the 'username input field' accurately. To provide a more robust CSS selector, we can consider using a combination of attributes like name and type to uniquely identify the input field. 
WARNING  TestAutomationFramework:logger.py:89 ⚠️ AI suggested locator found no elements: input[name='user-name'][type='text']
DEBUG    TestAutomationFramework:logger.py:79 Loaded 2 existing failures
INFO     TestAutomationFramework:logger.py:84 Adding new failure: #user-name -> input[name='user-name'][type='text']
INFO     TestAutomationFramework:logger.py:84 Saved captured failure to reports/captured_locator_failures.json (total: 3 failures)
WARNING  TestAutomationFramework:logger.py:89 🎯 Captured locator failure for PR creation: #user-name -> input[name='user-name'][type='text']
ERROR    TestAutomationFramework:logger.py:94 Maximum healing attempts (3) reached for: username input field
ERROR    TestAutomationFramework:logger.py:94 Fill action failed for '#user-name': Page.wait_for_selector: Timeout 5000ms exceeded.
Call log:
  - waiting for locator("#user-name") to be visible
DEBUG    TestAutomationFramework:logger.py:79 Closing browser page